// <auto-generated />
using System;
using ArtFold.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtFold.Migrations
{
    [DbContext(typeof(ArtFoldDbContext))]
    [Migration("20241020094629_inital")]
    partial class inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartID = new Guid("0d7e3155-2ad5-4d74-ba79-dc6c16be0cae"),
                            UserID = "b4b9de23-032d-4e8c-b5e4-5252170b0782"
                        },
                        new
                        {
                            CartID = new Guid("b468c633-a8ce-463b-ab35-2cee45207799"),
                            UserID = "3e6ae8dd-acee-4bb1-be78-e29e0bd90117"
                        },
                        new
                        {
                            CartID = new Guid("00cd4a80-0dda-418e-9e9c-641f886369c6"),
                            UserID = "a19f9cfb-702d-408e-a286-bc70a904c670"
                        },
                        new
                        {
                            CartID = new Guid("85360493-387d-469a-ba23-e32871578da8"),
                            UserID = "d6385c86-d027-48e3-bbc8-3855e4f8109d"
                        },
                        new
                        {
                            CartID = new Guid("fefd6342-c1f2-4b4c-9709-ea66a3b39837"),
                            UserID = "bbc7362d-86a5-476c-9a8b-28d3a7ae2ffa"
                        },
                        new
                        {
                            CartID = new Guid("710f41d4-b874-4c4f-9234-34630055a14d"),
                            UserID = "6ad7fd42-d7ef-4051-8c56-298b31fbf498"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.Property<Guid>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCartQuantity")
                        .HasColumnType("int");

                    b.HasKey("CartID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("8a0615ab-277b-413a-ab81-ef9ec394f129"),
                            CategoryName = "Anime"
                        },
                        new
                        {
                            CategoryID = new Guid("f6051227-b33a-4a5e-86f8-e5df6aac1dcc"),
                            CategoryName = "Vehicle"
                        },
                        new
                        {
                            CategoryID = new Guid("c1660c5c-bcd1-449a-8930-7bd6176eb812"),
                            CategoryName = "Marvel"
                        },
                        new
                        {
                            CategoryID = new Guid("b43d692b-01e5-47cb-9d80-102f821b6ff4"),
                            CategoryName = "Architecture"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.Property<Guid>("CheckOutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CheckOutID");

                    b.HasIndex("UserID");

                    b.ToTable("CheckOuts");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOutProduct", b =>
                {
                    b.Property<Guid>("CheckOutProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CheckOutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CheckOutProductID");

                    b.HasIndex("CheckOutID");

                    b.HasIndex("ProductID");

                    b.ToTable("CheckOutProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.Property<Guid>("CommentImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentImageID");

                    b.HasIndex("CommentID");

                    b.ToTable("CommentsImage");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PrintPaperType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("f4771d23-d29d-420c-8834-7f5e64b9e8a0"),
                            CategoryID = new Guid("8a0615ab-277b-413a-ab81-ef9ec394f129"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9741),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Goku SSJ HD – Dragon Ball bao gồm:\r\n- 25 tờ kit mô hình.\r\n- Kích thước: Cao: 55,5cm x Rộng: 13,4cm x Sâu: 23,9cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/ea93877ccd8d3700b6b9ede4220df541.webp",
                            Name = "Son Goku",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 50,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9745)
                        },
                        new
                        {
                            ProductID = new Guid("4f626bd2-e681-42b7-b36a-e029b3a9e215"),
                            CategoryID = new Guid("8a0615ab-277b-413a-ab81-ef9ec394f129"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9758),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Monkey D Luffy - One Piece bao gồm:\r\n- 18 tờ kit mô hình.\r\n- Kích thước: Cao: 40cm x Rộng: 23,4cm x Sâu: 21,6cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e82a586f3d146ea83a3b6303b4668914.webp",
                            Name = "Monkey D. Luffy",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 100,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9758)
                        },
                        new
                        {
                            ProductID = new Guid("6c53b7c7-b37d-4acc-998b-2571a0d82819"),
                            CategoryID = new Guid("8a0615ab-277b-413a-ab81-ef9ec394f129"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9763),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Uzumaki Naruto ver 3 bao gồm:\r\n- 6 tờ kit mô hình.\r\n(Mặc định bản kit sẽ được in bản có line, nếu bạn muốn in bản ko line trong đơn hàng bạn ghi chú là \"in bản ko line\" để shop cho in nhé)\r\n- Kích thước A4: Cao: 17cm x Rộng: 20,1cm x Sâu: 28,3cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/sg-11134201-22110-igsmlbzefhkvf0.webp",
                            Name = "Uzumaki Naruto",
                            Price = 42000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9764)
                        },
                        new
                        {
                            ProductID = new Guid("37b7bfff-1b65-4bec-84b2-77a094ca8d2d"),
                            CategoryID = new Guid("8a0615ab-277b-413a-ab81-ef9ec394f129"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9770),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Pokemon Pikachu Polygon ver 2 bao gồm:\r\n- 9 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 4 tờ hướng dẫn lắp ráp.\r\n- Kích thước A4: Cao: 33cm x Rộng: 30cm x Sâu: 34cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-ls9lvceatuah97@resize_w450_nl.webp",
                            Name = "Pikachu Polygon ver 2",
                            Price = 59000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9771)
                        },
                        new
                        {
                            ProductID = new Guid("d1e9916e-5300-4be3-bb4d-3ba78575d01d"),
                            CategoryID = new Guid("8a0615ab-277b-413a-ab81-ef9ec394f129"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9782),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Levi Ackerman ver 3 – Attack on Titan bao gồm:\r\n- 6 tờ kit mô hình.\r\n- Kích thước: Cao: 20,3cm x Rộng: 11,1cm x Sâu: 18cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a6da3b4677bd9309784051610617a5e7@resize_w450_nl.webp",
                            Name = "Chibi Levi Ackerman",
                            Price = 14000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 80,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9783)
                        },
                        new
                        {
                            ProductID = new Guid("8c18462f-549a-46e9-9e2b-bd1e8300ba15"),
                            CategoryID = new Guid("f6051227-b33a-4a5e-86f8-e5df6aac1dcc"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9790),
                            Description = "Bộ sản phẩm Mô hình giấy phi thuyền không gian vũ trụ tàu con thoi Space Shuttle Atlantis bao gồm:\r\n- 11 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4ed6a6e35f435d28286762c02db7f911.webp",
                            Name = "Space Shuttle Atlantis",
                            Price = 72000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9790)
                        },
                        new
                        {
                            ProductID = new Guid("bb2f9a1f-b327-4a7d-b3b4-f2e5318eb7c7"),
                            CategoryID = new Guid("f6051227-b33a-4a5e-86f8-e5df6aac1dcc"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9797),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Lamborghini Sesto Elemento bao gồm:\r\n- 3 tờ kit mô hình.\r\n- Kích thước: Cao: 4,9cm x Rộng: 8,6cm x Sâu: 18,1cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/966ca26a8de1b2f34c66449cc74e48bd.webp",
                            Name = "Lamborghini Sesto Elemento",
                            Price = 69000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9798)
                        },
                        new
                        {
                            ProductID = new Guid("6925d956-209d-437e-a34b-a5d1af544f61"),
                            CategoryID = new Guid("f6051227-b33a-4a5e-86f8-e5df6aac1dcc"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9808),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Prototype Technology Group BMW bao gồm:\r\n- 6 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/9fb112bf0fe8b6b773c0aa7411a2392c.webp",
                            Name = "Prototype Technology Group BMW",
                            Price = 79000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9808)
                        },
                        new
                        {
                            ProductID = new Guid("96b96a6a-349e-4aba-aab5-f12a7dd2a067"),
                            CategoryID = new Guid("f6051227-b33a-4a5e-86f8-e5df6aac1dcc"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9813),
                            Description = "Bộ sản phẩm Mô hình giấy xe máy Mille Miglia Custom Chopper bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 8 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/2fbbe89ee72a717b7f2bed3a84d8b259.webp",
                            Name = "Mille Miglia Custom Chopper Bike",
                            Price = 149000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9814)
                        },
                        new
                        {
                            ProductID = new Guid("4096ead6-de44-45e5-afc9-80701335804f"),
                            CategoryID = new Guid("f6051227-b33a-4a5e-86f8-e5df6aac1dcc"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9822),
                            Description = "Bộ sản phẩm Mô hình giấy máy bay Boeing 777-200 British Airways bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a09cfa936019a5e6c493acafbd4a13e1.webp",
                            Name = "Boeing 777-200 British Airways",
                            Price = 58000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9823)
                        },
                        new
                        {
                            ProductID = new Guid("3bd640d9-6303-4601-8ac9-36e40be00de1"),
                            CategoryID = new Guid("c1660c5c-bcd1-449a-8930-7bd6176eb812"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9832),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avenger Robot Iron Man Mark VII bao gồm:\r\n- 16 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5fc4fc6d877bc7c905b6f92eeb951a94.webp",
                            Name = "Robot Iron Man Mark VII",
                            Price = 105000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9833)
                        },
                        new
                        {
                            ProductID = new Guid("5bc5501a-b37f-4995-97a5-a30f6b785422"),
                            CategoryID = new Guid("c1660c5c-bcd1-449a-8930-7bd6176eb812"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9838),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Thor mập - Marvel bao gồm:\r\n- 8 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 2 tờ hướng dẫn lắp ráp.\r\n- Kích thước : Cao 15,5cm x Rộng 13cm x Sâu 9cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lmua3ev8pza778.webp",
                            Name = "Chibi Thor ",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9838)
                        },
                        new
                        {
                            ProductID = new Guid("95815a20-0c65-4018-80df-51528b66aa06"),
                            CategoryID = new Guid("c1660c5c-bcd1-449a-8930-7bd6176eb812"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9843),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Marvel Hulk Treo tường ver 3 bao gồm:\r\n– 17 tờ kit mô hình in trên giấy A4 Ford màu định lượng 180gsm (so với giấy photo là 70gsm) + scan code xem hướng dẫn.\r\n- Kích thước: Cao: khoảng 40cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/8aedf29f64c9de9ac7ec2b3f48182f7b.webp",
                            Name = "Marvel Hulk Wall Hanging",
                            Price = 83000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9844)
                        },
                        new
                        {
                            ProductID = new Guid("0f27a49e-b172-4aef-93d7-07aed4d7eb61"),
                            CategoryID = new Guid("c1660c5c-bcd1-449a-8930-7bd6176eb812"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9859),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avengers Iron Spider bao gồm:\r\n- 15 tờ kit mô hình.\r\n- Kích thước: Cao: 38cm x Rộng: 30,7cm x Sâu: 34,5cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4b925257b8c606d8ba5549860b146ad1.webp",
                            Name = "Marvel Avengers Iron Spider",
                            Price = 100000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9866)
                        },
                        new
                        {
                            ProductID = new Guid("13c64d5c-de4b-4691-86b1-054d2dccea3d"),
                            CategoryID = new Guid("c1660c5c-bcd1-449a-8930-7bd6176eb812"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9882),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Doctor Strange - Marvel bao gồm:\r\n- 2 tờ kit mô hình + kèm scan code xem video hướng dẫn lắp ráp.\r\n* Xuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lzad737x2krla7@resize_w450_nl.webp",
                            Name = "Chibi Doctor Strange",
                            Price = 25000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9883)
                        },
                        new
                        {
                            ProductID = new Guid("a7be10cd-f374-48d7-afea-bf1f4c2f382f"),
                            CategoryID = new Guid("b43d692b-01e5-47cb-9d80-102f821b6ff4"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9889),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc lâu đài Đức Neuschwanstein Castle - Germany bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/d50b7f9c059c8cb8e7c0654954a08ab1.webp",
                            Name = "Neuschwanstein Castle - Germany",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            ProductID = new Guid("ad7e43fb-6ac0-40f4-a802-e13f40813483"),
                            CategoryID = new Guid("b43d692b-01e5-47cb-9d80-102f821b6ff4"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9895),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Tháp Luân Đôn Tower of London – England bao gồm:\r\n- 10 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5e96e9613e2fd22d255d9d90159d19ce.webp",
                            Name = "Tower of London – England",
                            Price = 65000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9896)
                        },
                        new
                        {
                            ProductID = new Guid("22da34e9-b6da-4f99-ae4f-148c3558690b"),
                            CategoryID = new Guid("b43d692b-01e5-47cb-9d80-102f821b6ff4"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9903),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Pháp tháp Eiffel Tower bao gồm:\r\n- 9 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a077c0d85e3866a441e4b1e76ab69dbb.webp",
                            Name = "Eiffel Tower",
                            Price = 60000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9904)
                        },
                        new
                        {
                            ProductID = new Guid("31135c3a-4ba3-4286-a55b-95f3fc144d98"),
                            CategoryID = new Guid("b43d692b-01e5-47cb-9d80-102f821b6ff4"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9909),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Cambuchia Angkor Wat bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/edb6286c7abf2d62a36a911b5d0983d4.webp",
                            Name = "Cambuchia Angkor Wat",
                            Price = 156000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9910)
                        },
                        new
                        {
                            ProductID = new Guid("51bc5c8f-081b-4f11-9bde-82cb86342817"),
                            CategoryID = new Guid("b43d692b-01e5-47cb-9d80-102f821b6ff4"),
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9916),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Nhà thờ chính Siena Cathedral - Italy bao gồm:\r\n- 19 tờ kit mô hình.\r\n- 4 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e7ac1e43b3160334e9ca1fc66da7f34a.webp",
                            Name = "Siena Cathedral - Italy",
                            Price = 124000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 520, DateTimeKind.Local).AddTicks(9917)
                        });
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HouseAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b4b9de23-032d-4e8c-b5e4-5252170b0782",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8adbfc28-8696-4665-86bd-ffa8f7681780",
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 116, DateTimeKind.Local).AddTicks(3384),
                            Email = "bluegameming292003@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trần Minh Quốc Khánh",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH+XKXZhEGtsTcNoIPYXcCQJUHstZ7Y024Joz9xNWwi9jW4sBSPGlOIyOwjVl7gVew==",
                            PhoneNumber = "0934763210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "014d9adc-fbec-43a8-9784-c26f6e60f38d",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "3e6ae8dd-acee-4bb1-be78-e29e0bd90117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a35017a1-a706-4cf0-b1eb-a1728754c4bc",
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 178, DateTimeKind.Local).AddTicks(9407),
                            Email = "taimodel@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Lương Tài",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAWhDCKAcBuPB9WyloieBG+uOg7QLrRnKMo8U+xJucnZEvGKUOG9uZ6IDdAT3JEuAA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a16126b8-c730-4db3-8976-f6d2c6e5aad2",
                            TwoFactorEnabled = false,
                            UserName = "TaiModel"
                        },
                        new
                        {
                            Id = "a19f9cfb-702d-408e-a286-bc70a904c670",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5e483a0-ddbf-4add-b5b4-e43dc2ebf0cf",
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 241, DateTimeKind.Local).AddTicks(9023),
                            Email = "dinhuynhminhthu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đinh Huỳnh Minh Thư",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOSKK3IYaDe8B/tkIbIG1BvrSZAdWhKxkmT8SIdF6VwMTeZaNr057UAcmklucJA48g==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8946304d-008b-4937-92c1-14d0b5996fe9",
                            TwoFactorEnabled = false,
                            UserName = "MinhThu"
                        },
                        new
                        {
                            Id = "d6385c86-d027-48e3-bbc8-3855e4f8109d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b5e7a4df-afe0-42ac-865d-89b2c720c349",
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 305, DateTimeKind.Local).AddTicks(9737),
                            Email = "ngocha@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ngọc Hà",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEIFlYbZxw27CnbhrYLYld/dFhtapbwchkX3F3LGuhsJReicjL/ZAJe1xm8RW7sLOw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44d4480d-59db-45b5-a923-38629325af21",
                            TwoFactorEnabled = false,
                            UserName = "NgocHa"
                        },
                        new
                        {
                            Id = "bbc7362d-86a5-476c-9a8b-28d3a7ae2ffa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ea46694-1a19-456c-9258-4a8bd5446fe1",
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 376, DateTimeKind.Local).AddTicks(8644),
                            Email = "nguyenvungochan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Vũ Ngọc Hân",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEO1DVWcbiJly4ABoWROMEggrzzqlvXAImFzw3CjJ03HFjoRLZ46AACu/LFXBKvxK/w==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b778313f-3a9c-4416-b42f-6237abf071d8",
                            TwoFactorEnabled = false,
                            UserName = "NgocHan"
                        },
                        new
                        {
                            Id = "6ad7fd42-d7ef-4051-8c56-298b31fbf498",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b23e1a0a-ad4e-4ae0-b630-d8d5b6536666",
                            CreatedAt = new DateTime(2024, 10, 20, 16, 46, 28, 455, DateTimeKind.Local).AddTicks(5424),
                            Email = "thuIT@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Thư AI",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHIHsGH2+JekcJ3cjXYcLAU/2J6AG/zFH0bMsDgTbzPReMKMw/acsT+SMHWVpprY7A==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8b4a13a-bb74-4778-b524-4f501f22ea2e",
                            TwoFactorEnabled = false,
                            UserName = "ThuIT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "027b4239-5c02-45ff-91f7-2b36b959dcac",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "5a0710af-80e4-4bea-8950-cd6e46bb17eb",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b4b9de23-032d-4e8c-b5e4-5252170b0782",
                            RoleId = "027b4239-5c02-45ff-91f7-2b36b959dcac"
                        },
                        new
                        {
                            UserId = "3e6ae8dd-acee-4bb1-be78-e29e0bd90117",
                            RoleId = "5a0710af-80e4-4bea-8950-cd6e46bb17eb"
                        },
                        new
                        {
                            UserId = "a19f9cfb-702d-408e-a286-bc70a904c670",
                            RoleId = "5a0710af-80e4-4bea-8950-cd6e46bb17eb"
                        },
                        new
                        {
                            UserId = "d6385c86-d027-48e3-bbc8-3855e4f8109d",
                            RoleId = "5a0710af-80e4-4bea-8950-cd6e46bb17eb"
                        },
                        new
                        {
                            UserId = "bbc7362d-86a5-476c-9a8b-28d3a7ae2ffa",
                            RoleId = "5a0710af-80e4-4bea-8950-cd6e46bb17eb"
                        },
                        new
                        {
                            UserId = "6ad7fd42-d7ef-4051-8c56-298b31fbf498",
                            RoleId = "5a0710af-80e4-4bea-8950-cd6e46bb17eb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("CheckOuts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOutProduct", b =>
                {
                    b.HasOne("ArtFold.Models.CheckOut", "CheckOut")
                        .WithMany("CheckOutProducts")
                        .HasForeignKey("CheckOutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckOut");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.HasOne("ArtFold.Models.Comment", "Comment")
                        .WithMany("CommentImages")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.HasOne("ArtFold.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.Navigation("CheckOutProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Navigation("CommentImages");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Comments");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Navigation("CheckOuts");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}

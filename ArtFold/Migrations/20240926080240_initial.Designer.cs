// <auto-generated />
using System;
using ArtFold.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtFold.Migrations
{
    [DbContext(typeof(ArtFoldDbContext))]
    [Migration("20240926080240_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.Property<Guid>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCartQuantity")
                        .HasColumnType("int");

                    b.HasKey("CartID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("fc7e1651-a9db-4cdd-96be-7f5e89d0d51a"),
                            CategoryName = "Anime"
                        },
                        new
                        {
                            CategoryID = new Guid("39eca832-21d4-465b-a87c-2678b3a1f447"),
                            CategoryName = "Vehicle"
                        },
                        new
                        {
                            CategoryID = new Guid("d429237b-cc96-4a06-bfc2-bb1c29dde115"),
                            CategoryName = "Marvel"
                        },
                        new
                        {
                            CategoryID = new Guid("833ca1d8-d6f5-4209-af98-ee0225f4752b"),
                            CategoryName = "Architecture"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.Property<Guid>("CheckOutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckOutID");

                    b.HasIndex("OrderID");

                    b.ToTable("CheckOuts");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.Property<Guid>("CommentImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentImageID");

                    b.HasIndex("CommentID");

                    b.ToTable("CommentsImage");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ArtFold.Models.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PrintPaperType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("5bcd5ff1-b159-489c-b761-b81618863cd0"),
                            CategoryID = new Guid("fc7e1651-a9db-4cdd-96be-7f5e89d0d51a"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(863),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Goku SSJ HD – Dragon Ball bao gồm:\r\n- 25 tờ kit mô hình.\r\n- Kích thước: Cao: 55,5cm x Rộng: 13,4cm x Sâu: 23,9cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/ea93877ccd8d3700b6b9ede4220df541.webp",
                            Name = "Son Goku",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 50,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(866)
                        },
                        new
                        {
                            ProductID = new Guid("e32048f0-9cdd-4c2a-8c91-08705a541c88"),
                            CategoryID = new Guid("fc7e1651-a9db-4cdd-96be-7f5e89d0d51a"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(884),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Monkey D Luffy - One Piece bao gồm:\r\n- 18 tờ kit mô hình.\r\n- Kích thước: Cao: 40cm x Rộng: 23,4cm x Sâu: 21,6cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e82a586f3d146ea83a3b6303b4668914.webp",
                            Name = "Monkey D. Luffy",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 100,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(885)
                        },
                        new
                        {
                            ProductID = new Guid("0609fd32-3eb0-4dda-943c-6337bcebd5fb"),
                            CategoryID = new Guid("fc7e1651-a9db-4cdd-96be-7f5e89d0d51a"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(901),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Uzumaki Naruto ver 3 bao gồm:\r\n- 6 tờ kit mô hình.\r\n(Mặc định bản kit sẽ được in bản có line, nếu bạn muốn in bản ko line trong đơn hàng bạn ghi chú là \"in bản ko line\" để shop cho in nhé)\r\n- Kích thước A4: Cao: 17cm x Rộng: 20,1cm x Sâu: 28,3cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/sg-11134201-22110-igsmlbzefhkvf0.webp",
                            Name = "Uzumaki Naruto",
                            Price = 42000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(902)
                        },
                        new
                        {
                            ProductID = new Guid("054c85ff-85d0-440c-936d-6b17da77ae3c"),
                            CategoryID = new Guid("fc7e1651-a9db-4cdd-96be-7f5e89d0d51a"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1041),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Pokemon Pikachu Polygon ver 2 bao gồm:\r\n- 9 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 4 tờ hướng dẫn lắp ráp.\r\n- Kích thước A4: Cao: 33cm x Rộng: 30cm x Sâu: 34cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-ls9lvceatuah97@resize_w450_nl.webp",
                            Name = "Pikachu Polygon ver 2",
                            Price = 59000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1042)
                        },
                        new
                        {
                            ProductID = new Guid("d1a6c9e8-207b-4c58-bcee-ff2b938db4d1"),
                            CategoryID = new Guid("fc7e1651-a9db-4cdd-96be-7f5e89d0d51a"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1047),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Levi Ackerman ver 3 – Attack on Titan bao gồm:\r\n- 6 tờ kit mô hình.\r\n- Kích thước: Cao: 20,3cm x Rộng: 11,1cm x Sâu: 18cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a6da3b4677bd9309784051610617a5e7@resize_w450_nl.webp",
                            Name = "Chibi Levi Ackerman",
                            Price = 14000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 80,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1048)
                        },
                        new
                        {
                            ProductID = new Guid("0e19a79b-a316-495a-b867-9a1185192a79"),
                            CategoryID = new Guid("39eca832-21d4-465b-a87c-2678b3a1f447"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1056),
                            Description = "Bộ sản phẩm Mô hình giấy phi thuyền không gian vũ trụ tàu con thoi Space Shuttle Atlantis bao gồm:\r\n- 11 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4ed6a6e35f435d28286762c02db7f911.webp",
                            Name = "Space Shuttle Atlantis",
                            Price = 72000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1057)
                        },
                        new
                        {
                            ProductID = new Guid("e31cd274-6e8b-4dee-ae26-d950231be745"),
                            CategoryID = new Guid("39eca832-21d4-465b-a87c-2678b3a1f447"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1063),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Lamborghini Sesto Elemento bao gồm:\r\n- 3 tờ kit mô hình.\r\n- Kích thước: Cao: 4,9cm x Rộng: 8,6cm x Sâu: 18,1cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/966ca26a8de1b2f34c66449cc74e48bd.webp",
                            Name = "Lamborghini Sesto Elemento",
                            Price = 69000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1063)
                        },
                        new
                        {
                            ProductID = new Guid("7e4e9930-0826-42cf-84fe-8fed33c07380"),
                            CategoryID = new Guid("39eca832-21d4-465b-a87c-2678b3a1f447"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1069),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Prototype Technology Group BMW bao gồm:\r\n- 6 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/9fb112bf0fe8b6b773c0aa7411a2392c.webp",
                            Name = "Prototype Technology Group BMW",
                            Price = 79000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1069)
                        },
                        new
                        {
                            ProductID = new Guid("63d71614-0b4e-476b-92e4-c5acbb736891"),
                            CategoryID = new Guid("39eca832-21d4-465b-a87c-2678b3a1f447"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1074),
                            Description = "Bộ sản phẩm Mô hình giấy xe máy Mille Miglia Custom Chopper bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 8 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/2fbbe89ee72a717b7f2bed3a84d8b259.webp",
                            Name = "Mille Miglia Custom Chopper Bike",
                            Price = 149000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1075)
                        },
                        new
                        {
                            ProductID = new Guid("d443ed0e-93cd-4a96-b683-92f052e044e5"),
                            CategoryID = new Guid("39eca832-21d4-465b-a87c-2678b3a1f447"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1092),
                            Description = "Bộ sản phẩm Mô hình giấy máy bay Boeing 777-200 British Airways bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a09cfa936019a5e6c493acafbd4a13e1.webp",
                            Name = "Boeing 777-200 British Airways",
                            Price = 58000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1093)
                        },
                        new
                        {
                            ProductID = new Guid("da4c58d8-966a-4db6-9ebb-2b9c5a76f1a9"),
                            CategoryID = new Guid("d429237b-cc96-4a06-bfc2-bb1c29dde115"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1105),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avenger Robot Iron Man Mark VII bao gồm:\r\n- 16 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5fc4fc6d877bc7c905b6f92eeb951a94.webp",
                            Name = "Robot Iron Man Mark VII",
                            Price = 105000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1106)
                        },
                        new
                        {
                            ProductID = new Guid("2f9dbde4-4c83-4966-b572-3a99a2479c92"),
                            CategoryID = new Guid("d429237b-cc96-4a06-bfc2-bb1c29dde115"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1113),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Thor mập - Marvel bao gồm:\r\n- 8 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 2 tờ hướng dẫn lắp ráp.\r\n- Kích thước : Cao 15,5cm x Rộng 13cm x Sâu 9cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lmua3ev8pza778.webp",
                            Name = "Chibi Thor ",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1114)
                        },
                        new
                        {
                            ProductID = new Guid("6253f14f-94ce-49a7-86aa-bbf3068c4805"),
                            CategoryID = new Guid("d429237b-cc96-4a06-bfc2-bb1c29dde115"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1120),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Marvel Hulk Treo tường ver 3 bao gồm:\r\n– 17 tờ kit mô hình in trên giấy A4 Ford màu định lượng 180gsm (so với giấy photo là 70gsm) + scan code xem hướng dẫn.\r\n- Kích thước: Cao: khoảng 40cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/8aedf29f64c9de9ac7ec2b3f48182f7b.webp",
                            Name = "Marvel Hulk Wall Hanging",
                            Price = 83000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1121)
                        },
                        new
                        {
                            ProductID = new Guid("3b3baa5b-782e-42b8-8804-40ad37451310"),
                            CategoryID = new Guid("d429237b-cc96-4a06-bfc2-bb1c29dde115"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1132),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avengers Iron Spider bao gồm:\r\n- 15 tờ kit mô hình.\r\n- Kích thước: Cao: 38cm x Rộng: 30,7cm x Sâu: 34,5cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4b925257b8c606d8ba5549860b146ad1.webp",
                            Name = "Marvel Avengers Iron Spider",
                            Price = 100000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1144)
                        },
                        new
                        {
                            ProductID = new Guid("30376a83-1042-4bfb-b3be-569e2b09b728"),
                            CategoryID = new Guid("d429237b-cc96-4a06-bfc2-bb1c29dde115"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1156),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Doctor Strange - Marvel bao gồm:\r\n- 2 tờ kit mô hình + kèm scan code xem video hướng dẫn lắp ráp.\r\n* Xuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lzad737x2krla7@resize_w450_nl.webp",
                            Name = "Chibi Doctor Strange",
                            Price = 25000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1157)
                        },
                        new
                        {
                            ProductID = new Guid("7a51e04a-e6f4-4856-98ad-600dfe6f6ad6"),
                            CategoryID = new Guid("833ca1d8-d6f5-4209-af98-ee0225f4752b"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1164),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc lâu đài Đức Neuschwanstein Castle - Germany bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/d50b7f9c059c8cb8e7c0654954a08ab1.webp",
                            Name = "Neuschwanstein Castle - Germany",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1165)
                        },
                        new
                        {
                            ProductID = new Guid("2851db28-15cf-47ef-b6d2-25f2d27850a0"),
                            CategoryID = new Guid("833ca1d8-d6f5-4209-af98-ee0225f4752b"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1174),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Tháp Luân Đôn Tower of London – England bao gồm:\r\n- 10 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5e96e9613e2fd22d255d9d90159d19ce.webp",
                            Name = "Tower of London – England",
                            Price = 65000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1174)
                        },
                        new
                        {
                            ProductID = new Guid("acd28c38-eda4-481b-ad84-bbd071349c09"),
                            CategoryID = new Guid("833ca1d8-d6f5-4209-af98-ee0225f4752b"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1182),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Pháp tháp Eiffel Tower bao gồm:\r\n- 9 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a077c0d85e3866a441e4b1e76ab69dbb.webp",
                            Name = "Eiffel Tower",
                            Price = 60000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1183)
                        },
                        new
                        {
                            ProductID = new Guid("062c24b1-b57b-45b7-89fd-51b0e06345ad"),
                            CategoryID = new Guid("833ca1d8-d6f5-4209-af98-ee0225f4752b"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1191),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Cambuchia Angkor Wat bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/edb6286c7abf2d62a36a911b5d0983d4.webp",
                            Name = "Cambuchia Angkor Wat",
                            Price = 156000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1192)
                        },
                        new
                        {
                            ProductID = new Guid("966563f1-9a83-4de8-9263-02a9a39758ff"),
                            CategoryID = new Guid("833ca1d8-d6f5-4209-af98-ee0225f4752b"),
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1197),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Nhà thờ chính Siena Cathedral - Italy bao gồm:\r\n- 19 tờ kit mô hình.\r\n- 4 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e7ac1e43b3160334e9ca1fc66da7f34a.webp",
                            Name = "Siena Cathedral - Italy",
                            Price = 124000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 333, DateTimeKind.Local).AddTicks(1198)
                        });
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e97182cc-ec3c-429c-beb6-5b6534edab28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "051337cf-dd3d-4890-9667-5815cf330121",
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 38, 960, DateTimeKind.Local).AddTicks(6280),
                            Email = "bluegameming292003@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trần Minh Quốc Khánh",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHt7JYXIZ7imnIivpQRmCwLr8D2pm+nXOjDr3wqXpW0MIwfQbcigi5g7wM2osNA2UA==",
                            PhoneNumber = "0934763210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38447e3f-f0b8-4d52-a2db-cdbb5bb02276",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "fe7995af-a50f-4fb9-bb7e-440b4490b570",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0626891-4c61-4e75-9f5e-122a33aa9858",
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 20, DateTimeKind.Local).AddTicks(9332),
                            Email = "taimodel@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Lương Tài",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDCi/t/hW6OfRz67ztZytFMV5/bLNOlt4Ts63pX+JrL78+XeUwoYYek9nFsLEJTgtw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e26ec9b0-6d42-46ec-9b8e-f5d18fb25d15",
                            TwoFactorEnabled = false,
                            UserName = "TaiModel"
                        },
                        new
                        {
                            Id = "3a0fa642-476e-40ae-8add-87d502a4e4d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97a7c332-729b-4935-8432-0c7fb2154d15",
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 80, DateTimeKind.Local).AddTicks(6132),
                            Email = "dinhuynhminhthu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đinh Huỳnh Minh Thư",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENPvikVyqbH5HRkkO0revG++T5hZ8FTJyGKS7BDy2RDuLIxmAT0ItfdYitF0o45RQA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3faed014-2d19-4735-9453-21ded65f8072",
                            TwoFactorEnabled = false,
                            UserName = "MinhThu"
                        },
                        new
                        {
                            Id = "354a25bf-3714-4e40-8025-00d9dd12db65",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab99e713-a7fd-49bf-9f89-76fa9d86529a",
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 140, DateTimeKind.Local).AddTicks(4630),
                            Email = "ngocha@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ngọc Hà",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEOthCq8W215dkkkkRIih37QN11JMQS6sG7yOp7HwnAKRZLIFieZH5uBJoHvDcdaJoA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d11413f-7c2c-48b9-9981-416a15d57695",
                            TwoFactorEnabled = false,
                            UserName = "NgocHa"
                        },
                        new
                        {
                            Id = "a591095b-50cc-4860-b0b2-e758d6165500",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0e8aa60-6d3e-4a36-b723-9537024ebada",
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 214, DateTimeKind.Local).AddTicks(2749),
                            Email = "nguyenvungochan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Vũ Ngọc Hân",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGE7qaJwYHuilasL0kKLn6db2oHoVFzurbUTceW599PfDXN3wveyapKQdd6UN53gfA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ed35d08-c754-4ab4-a928-5a6a034a1624",
                            TwoFactorEnabled = false,
                            UserName = "NgocHan"
                        },
                        new
                        {
                            Id = "c779ffa8-c675-42c6-a067-f13c70579722",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36a1db4f-4e00-4602-9954-c5467b038a0c",
                            CreatedAt = new DateTime(2024, 9, 26, 15, 2, 39, 273, DateTimeKind.Local).AddTicks(2741),
                            Email = "thuIT@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Thư AI",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAkjB11gBKQmztiptrvEi9E1cv33ecGJ2JDPK5ivnVOj/m2KHPEVLTyeKawfgPLyfg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff77649f-c947-4435-bb2f-dcb79fdc555e",
                            TwoFactorEnabled = false,
                            UserName = "ThuIT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fc8c6e5b-f4e8-472b-b6ba-09a5dceb3c93",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7daea6a4-5d35-4cb2-907c-29eb1793e201",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e97182cc-ec3c-429c-beb6-5b6534edab28",
                            RoleId = "fc8c6e5b-f4e8-472b-b6ba-09a5dceb3c93"
                        },
                        new
                        {
                            UserId = "fe7995af-a50f-4fb9-bb7e-440b4490b570",
                            RoleId = "7daea6a4-5d35-4cb2-907c-29eb1793e201"
                        },
                        new
                        {
                            UserId = "3a0fa642-476e-40ae-8add-87d502a4e4d5",
                            RoleId = "7daea6a4-5d35-4cb2-907c-29eb1793e201"
                        },
                        new
                        {
                            UserId = "354a25bf-3714-4e40-8025-00d9dd12db65",
                            RoleId = "7daea6a4-5d35-4cb2-907c-29eb1793e201"
                        },
                        new
                        {
                            UserId = "a591095b-50cc-4860-b0b2-e758d6165500",
                            RoleId = "7daea6a4-5d35-4cb2-907c-29eb1793e201"
                        },
                        new
                        {
                            UserId = "c779ffa8-c675-42c6-a067-f13c70579722",
                            RoleId = "7daea6a4-5d35-4cb2-907c-29eb1793e201"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.HasOne("ArtFold.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.HasOne("ArtFold.Models.Comment", "Comment")
                        .WithMany("CommentImages")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.OrderProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.HasOne("ArtFold.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Navigation("CommentImages");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Comments");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

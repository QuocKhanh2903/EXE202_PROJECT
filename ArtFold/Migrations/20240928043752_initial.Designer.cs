// <auto-generated />
using System;
using ArtFold.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtFold.Migrations
{
    [DbContext(typeof(ArtFoldDbContext))]
    [Migration("20240928043752_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartID = new Guid("aa8a7c4c-96b9-47e0-873a-cbf425f34d0c"),
                            UserID = "a2341b19-59f1-47dc-9cb3-034d7b2bb9f0"
                        },
                        new
                        {
                            CartID = new Guid("34fc8c48-c213-43e0-a4b0-15f7a4bd23e9"),
                            UserID = "e69a1917-b30e-4a75-aa2d-d8718bdb60ae"
                        },
                        new
                        {
                            CartID = new Guid("221ff95c-c073-42a7-9434-caf7c9a54755"),
                            UserID = "e4d911cf-2871-4bac-b548-8e825d8353d6"
                        },
                        new
                        {
                            CartID = new Guid("4e74dabe-8ca2-4d81-a868-01ec724b7eb8"),
                            UserID = "30375519-31fe-4714-b3ba-a51ae1732c86"
                        },
                        new
                        {
                            CartID = new Guid("782e887a-689e-4a95-b4ad-efe44f98cad3"),
                            UserID = "cb7dfc70-23fc-4296-a06d-29e9988d84f1"
                        },
                        new
                        {
                            CartID = new Guid("74498870-f256-4bea-819f-c37c9b772b72"),
                            UserID = "841c25b5-13fc-4b8c-8092-c8e6420a867d"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.Property<Guid>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCartQuantity")
                        .HasColumnType("int");

                    b.HasKey("CartID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("7db5876e-b1dc-484e-bafc-465b53ec03d7"),
                            CategoryName = "Anime"
                        },
                        new
                        {
                            CategoryID = new Guid("51c982ac-e680-4f54-a3de-b265bb164d9d"),
                            CategoryName = "Vehicle"
                        },
                        new
                        {
                            CategoryID = new Guid("f94da136-1534-4561-8177-3c69b1fe708d"),
                            CategoryName = "Marvel"
                        },
                        new
                        {
                            CategoryID = new Guid("66aa8768-d7e5-4663-900c-99415f7f0852"),
                            CategoryName = "Architecture"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.Property<Guid>("CheckOutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckOutID");

                    b.HasIndex("OrderID");

                    b.ToTable("CheckOuts");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.Property<Guid>("CommentImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentImageID");

                    b.HasIndex("CommentID");

                    b.ToTable("CommentsImage");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ArtFold.Models.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PrintPaperType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("1fd0c45e-070a-4b34-a8d9-ea2c7bed167d"),
                            CategoryID = new Guid("7db5876e-b1dc-484e-bafc-465b53ec03d7"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6513),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Goku SSJ HD – Dragon Ball bao gồm:\r\n- 25 tờ kit mô hình.\r\n- Kích thước: Cao: 55,5cm x Rộng: 13,4cm x Sâu: 23,9cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/ea93877ccd8d3700b6b9ede4220df541.webp",
                            Name = "Son Goku",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 50,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6518)
                        },
                        new
                        {
                            ProductID = new Guid("8678cc48-1bd8-4894-908c-de0526ddfe62"),
                            CategoryID = new Guid("7db5876e-b1dc-484e-bafc-465b53ec03d7"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6532),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Monkey D Luffy - One Piece bao gồm:\r\n- 18 tờ kit mô hình.\r\n- Kích thước: Cao: 40cm x Rộng: 23,4cm x Sâu: 21,6cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e82a586f3d146ea83a3b6303b4668914.webp",
                            Name = "Monkey D. Luffy",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 100,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6533)
                        },
                        new
                        {
                            ProductID = new Guid("72271fd9-d772-4a82-b92e-695e2fe45bce"),
                            CategoryID = new Guid("7db5876e-b1dc-484e-bafc-465b53ec03d7"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6539),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Uzumaki Naruto ver 3 bao gồm:\r\n- 6 tờ kit mô hình.\r\n(Mặc định bản kit sẽ được in bản có line, nếu bạn muốn in bản ko line trong đơn hàng bạn ghi chú là \"in bản ko line\" để shop cho in nhé)\r\n- Kích thước A4: Cao: 17cm x Rộng: 20,1cm x Sâu: 28,3cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/sg-11134201-22110-igsmlbzefhkvf0.webp",
                            Name = "Uzumaki Naruto",
                            Price = 42000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6539)
                        },
                        new
                        {
                            ProductID = new Guid("2b9005bf-fd83-40c8-b8e9-6734934a7baf"),
                            CategoryID = new Guid("7db5876e-b1dc-484e-bafc-465b53ec03d7"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6545),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Pokemon Pikachu Polygon ver 2 bao gồm:\r\n- 9 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 4 tờ hướng dẫn lắp ráp.\r\n- Kích thước A4: Cao: 33cm x Rộng: 30cm x Sâu: 34cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-ls9lvceatuah97@resize_w450_nl.webp",
                            Name = "Pikachu Polygon ver 2",
                            Price = 59000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6545)
                        },
                        new
                        {
                            ProductID = new Guid("85a429c3-2932-4147-866e-9c4edfb1e355"),
                            CategoryID = new Guid("7db5876e-b1dc-484e-bafc-465b53ec03d7"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6567),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Levi Ackerman ver 3 – Attack on Titan bao gồm:\r\n- 6 tờ kit mô hình.\r\n- Kích thước: Cao: 20,3cm x Rộng: 11,1cm x Sâu: 18cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a6da3b4677bd9309784051610617a5e7@resize_w450_nl.webp",
                            Name = "Chibi Levi Ackerman",
                            Price = 14000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 80,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6567)
                        },
                        new
                        {
                            ProductID = new Guid("e9e6040f-b81e-4516-9df9-ae65745b203a"),
                            CategoryID = new Guid("51c982ac-e680-4f54-a3de-b265bb164d9d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6573),
                            Description = "Bộ sản phẩm Mô hình giấy phi thuyền không gian vũ trụ tàu con thoi Space Shuttle Atlantis bao gồm:\r\n- 11 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4ed6a6e35f435d28286762c02db7f911.webp",
                            Name = "Space Shuttle Atlantis",
                            Price = 72000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6574)
                        },
                        new
                        {
                            ProductID = new Guid("6e4dcf25-771a-48d9-9e6e-ab6612f9ec0f"),
                            CategoryID = new Guid("51c982ac-e680-4f54-a3de-b265bb164d9d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6581),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Lamborghini Sesto Elemento bao gồm:\r\n- 3 tờ kit mô hình.\r\n- Kích thước: Cao: 4,9cm x Rộng: 8,6cm x Sâu: 18,1cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/966ca26a8de1b2f34c66449cc74e48bd.webp",
                            Name = "Lamborghini Sesto Elemento",
                            Price = 69000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6582)
                        },
                        new
                        {
                            ProductID = new Guid("91539440-ba60-42aa-b54e-183a75ba1cc6"),
                            CategoryID = new Guid("51c982ac-e680-4f54-a3de-b265bb164d9d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6595),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Prototype Technology Group BMW bao gồm:\r\n- 6 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/9fb112bf0fe8b6b773c0aa7411a2392c.webp",
                            Name = "Prototype Technology Group BMW",
                            Price = 79000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6596)
                        },
                        new
                        {
                            ProductID = new Guid("839450d6-ee63-48a0-8717-c8459a87cbe1"),
                            CategoryID = new Guid("51c982ac-e680-4f54-a3de-b265bb164d9d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6604),
                            Description = "Bộ sản phẩm Mô hình giấy xe máy Mille Miglia Custom Chopper bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 8 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/2fbbe89ee72a717b7f2bed3a84d8b259.webp",
                            Name = "Mille Miglia Custom Chopper Bike",
                            Price = 149000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6605)
                        },
                        new
                        {
                            ProductID = new Guid("5da5b129-6f54-4422-bb02-d65fba0a0c8b"),
                            CategoryID = new Guid("51c982ac-e680-4f54-a3de-b265bb164d9d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6627),
                            Description = "Bộ sản phẩm Mô hình giấy máy bay Boeing 777-200 British Airways bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a09cfa936019a5e6c493acafbd4a13e1.webp",
                            Name = "Boeing 777-200 British Airways",
                            Price = 58000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6628)
                        },
                        new
                        {
                            ProductID = new Guid("3ab9dc02-ff80-43a3-baf2-9f110f8291c7"),
                            CategoryID = new Guid("f94da136-1534-4561-8177-3c69b1fe708d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6643),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avenger Robot Iron Man Mark VII bao gồm:\r\n- 16 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5fc4fc6d877bc7c905b6f92eeb951a94.webp",
                            Name = "Robot Iron Man Mark VII",
                            Price = 105000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6644)
                        },
                        new
                        {
                            ProductID = new Guid("c09d5680-29de-4174-b39d-c37e722441f4"),
                            CategoryID = new Guid("f94da136-1534-4561-8177-3c69b1fe708d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6650),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Thor mập - Marvel bao gồm:\r\n- 8 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 2 tờ hướng dẫn lắp ráp.\r\n- Kích thước : Cao 15,5cm x Rộng 13cm x Sâu 9cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lmua3ev8pza778.webp",
                            Name = "Chibi Thor ",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6651)
                        },
                        new
                        {
                            ProductID = new Guid("c3f0924c-b335-4a43-8a75-3f5d5989888d"),
                            CategoryID = new Guid("f94da136-1534-4561-8177-3c69b1fe708d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6659),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Marvel Hulk Treo tường ver 3 bao gồm:\r\n– 17 tờ kit mô hình in trên giấy A4 Ford màu định lượng 180gsm (so với giấy photo là 70gsm) + scan code xem hướng dẫn.\r\n- Kích thước: Cao: khoảng 40cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/8aedf29f64c9de9ac7ec2b3f48182f7b.webp",
                            Name = "Marvel Hulk Wall Hanging",
                            Price = 83000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6660)
                        },
                        new
                        {
                            ProductID = new Guid("0f6e34af-c9b5-43a4-9c6a-119c33453563"),
                            CategoryID = new Guid("f94da136-1534-4561-8177-3c69b1fe708d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6678),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avengers Iron Spider bao gồm:\r\n- 15 tờ kit mô hình.\r\n- Kích thước: Cao: 38cm x Rộng: 30,7cm x Sâu: 34,5cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4b925257b8c606d8ba5549860b146ad1.webp",
                            Name = "Marvel Avengers Iron Spider",
                            Price = 100000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6699)
                        },
                        new
                        {
                            ProductID = new Guid("9826195e-1ed2-40a8-b3b6-3accd385883f"),
                            CategoryID = new Guid("f94da136-1534-4561-8177-3c69b1fe708d"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6713),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Doctor Strange - Marvel bao gồm:\r\n- 2 tờ kit mô hình + kèm scan code xem video hướng dẫn lắp ráp.\r\n* Xuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lzad737x2krla7@resize_w450_nl.webp",
                            Name = "Chibi Doctor Strange",
                            Price = 25000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6714)
                        },
                        new
                        {
                            ProductID = new Guid("3f6d8d9a-7e31-4938-867d-734d9956df4b"),
                            CategoryID = new Guid("66aa8768-d7e5-4663-900c-99415f7f0852"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6721),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc lâu đài Đức Neuschwanstein Castle - Germany bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/d50b7f9c059c8cb8e7c0654954a08ab1.webp",
                            Name = "Neuschwanstein Castle - Germany",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6722)
                        },
                        new
                        {
                            ProductID = new Guid("ae566254-1b7e-4f65-95ee-74b552d70fca"),
                            CategoryID = new Guid("66aa8768-d7e5-4663-900c-99415f7f0852"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6729),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Tháp Luân Đôn Tower of London – England bao gồm:\r\n- 10 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5e96e9613e2fd22d255d9d90159d19ce.webp",
                            Name = "Tower of London – England",
                            Price = 65000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6730)
                        },
                        new
                        {
                            ProductID = new Guid("d9bf655a-9eff-47dc-bf07-657ac8c2fa4c"),
                            CategoryID = new Guid("66aa8768-d7e5-4663-900c-99415f7f0852"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6738),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Pháp tháp Eiffel Tower bao gồm:\r\n- 9 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a077c0d85e3866a441e4b1e76ab69dbb.webp",
                            Name = "Eiffel Tower",
                            Price = 60000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6738)
                        },
                        new
                        {
                            ProductID = new Guid("8ce4bec0-b2b2-4a56-a51a-11b729b54b9e"),
                            CategoryID = new Guid("66aa8768-d7e5-4663-900c-99415f7f0852"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6775),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Cambuchia Angkor Wat bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/edb6286c7abf2d62a36a911b5d0983d4.webp",
                            Name = "Cambuchia Angkor Wat",
                            Price = 156000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6776)
                        },
                        new
                        {
                            ProductID = new Guid("e9185e9b-f478-4c50-ad3d-094d0805f07e"),
                            CategoryID = new Guid("66aa8768-d7e5-4663-900c-99415f7f0852"),
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6782),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Nhà thờ chính Siena Cathedral - Italy bao gồm:\r\n- 19 tờ kit mô hình.\r\n- 4 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e7ac1e43b3160334e9ca1fc66da7f34a.webp",
                            Name = "Siena Cathedral - Italy",
                            Price = 124000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 909, DateTimeKind.Local).AddTicks(6782)
                        });
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a2341b19-59f1-47dc-9cb3-034d7b2bb9f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdd95d27-a949-40c4-a42e-d92950bdf2cc",
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 500, DateTimeKind.Local).AddTicks(2535),
                            Email = "bluegameming292003@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trần Minh Quốc Khánh",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKxNf1+eHLqCEzNb23bbwg+24gKK3arG3aRRXGrqNNJ5BqjmoydI0W7v416XEDpe4w==",
                            PhoneNumber = "0934763210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be33c783-a598-4bb9-8561-92ebc6d798df",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "e69a1917-b30e-4a75-aa2d-d8718bdb60ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f0025d0-5d7c-4808-bc22-dd15e4623ca7",
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 563, DateTimeKind.Local).AddTicks(2486),
                            Email = "taimodel@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Lương Tài",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENw6X6hjX+e/78Hr+2P42PO1IBNMlZnaw9mpIs4D6Bqu3BORss8sBXTUxMW0kZj8AA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83aeba9c-ebf7-4018-be4a-4244da86db5b",
                            TwoFactorEnabled = false,
                            UserName = "TaiModel"
                        },
                        new
                        {
                            Id = "e4d911cf-2871-4bac-b548-8e825d8353d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8980e4c-9792-405d-a135-f71c6149ceac",
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 641, DateTimeKind.Local).AddTicks(221),
                            Email = "dinhuynhminhthu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đinh Huỳnh Minh Thư",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENEmaVCFak+qsTLeKAOJhHmxFNUfM6Kgcv8VSJcKs4Q6+QRuHQssW4Wakb/YzUtL4g==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4f786bb-5dfb-4bc2-91f4-c30835725b71",
                            TwoFactorEnabled = false,
                            UserName = "MinhThu"
                        },
                        new
                        {
                            Id = "30375519-31fe-4714-b3ba-a51ae1732c86",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4965d14-0995-4098-9ca1-29ba1f7c1a29",
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 708, DateTimeKind.Local).AddTicks(1764),
                            Email = "ngocha@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ngọc Hà",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIoI7yx2vLQ4vpV7GfYLuXqY75Q5jKmR89/Ct+W90z2yJk93FRLGJ9MTwcLqx2C19g==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4317b928-b1ed-4105-b15b-4663c0416cbe",
                            TwoFactorEnabled = false,
                            UserName = "NgocHa"
                        },
                        new
                        {
                            Id = "cb7dfc70-23fc-4296-a06d-29e9988d84f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "809b5d2f-e946-4757-bd0e-20e3a28c6b59",
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 783, DateTimeKind.Local).AddTicks(9921),
                            Email = "nguyenvungochan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Vũ Ngọc Hân",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAED9y3MYBBFLqaU1LkKHrScgeUOKyXUgW72ufZgg9Pyt7/XalaoBQaEHu/bL65P40bA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57acb4f3-114c-4274-8616-d3864143333d",
                            TwoFactorEnabled = false,
                            UserName = "NgocHan"
                        },
                        new
                        {
                            Id = "841c25b5-13fc-4b8c-8092-c8e6420a867d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0163405-ed1e-49f4-af65-39e8f2ea568d",
                            CreatedAt = new DateTime(2024, 9, 28, 11, 37, 50, 848, DateTimeKind.Local).AddTicks(1786),
                            Email = "thuIT@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Thư AI",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAIuboVyoSKzDIbC7qwcm8nBb6bNTpMRxtG/q/Nlahs20abM1tRW5tfmw9F1gC8AcA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cc46424-5dd2-4a68-9bf4-04d5771a8d19",
                            TwoFactorEnabled = false,
                            UserName = "ThuIT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3fa65a9a-59cc-4a27-83f9-dc477498c2b8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2e09c8fc-d898-4f54-8860-e7cd016f61d7",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a2341b19-59f1-47dc-9cb3-034d7b2bb9f0",
                            RoleId = "3fa65a9a-59cc-4a27-83f9-dc477498c2b8"
                        },
                        new
                        {
                            UserId = "e69a1917-b30e-4a75-aa2d-d8718bdb60ae",
                            RoleId = "2e09c8fc-d898-4f54-8860-e7cd016f61d7"
                        },
                        new
                        {
                            UserId = "e4d911cf-2871-4bac-b548-8e825d8353d6",
                            RoleId = "2e09c8fc-d898-4f54-8860-e7cd016f61d7"
                        },
                        new
                        {
                            UserId = "30375519-31fe-4714-b3ba-a51ae1732c86",
                            RoleId = "2e09c8fc-d898-4f54-8860-e7cd016f61d7"
                        },
                        new
                        {
                            UserId = "cb7dfc70-23fc-4296-a06d-29e9988d84f1",
                            RoleId = "2e09c8fc-d898-4f54-8860-e7cd016f61d7"
                        },
                        new
                        {
                            UserId = "841c25b5-13fc-4b8c-8092-c8e6420a867d",
                            RoleId = "2e09c8fc-d898-4f54-8860-e7cd016f61d7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.HasOne("ArtFold.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.HasOne("ArtFold.Models.Comment", "Comment")
                        .WithMany("CommentImages")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.OrderProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.HasOne("ArtFold.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Navigation("CommentImages");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Comments");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

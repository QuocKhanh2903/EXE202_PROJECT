// <auto-generated />
using System;
using ArtFold.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtFold.Migrations
{
    [DbContext(typeof(ArtFoldDbContext))]
    [Migration("20241016081436_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Property<Guid>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartID = new Guid("0175d658-c44d-4ee6-ae73-c9683daa3698"),
                            UserID = "a89c25d6-cce0-4254-9a16-5663d79746cd"
                        },
                        new
                        {
                            CartID = new Guid("a1141166-0572-4f67-bf44-26a9db156e5d"),
                            UserID = "99cce0f7-0a0a-4fdb-89ce-3f130d9cee88"
                        },
                        new
                        {
                            CartID = new Guid("177840a5-eca3-42d4-90d0-3ccdf7e94d32"),
                            UserID = "0da17ed7-ffb0-491a-9284-c6bae0587dac"
                        },
                        new
                        {
                            CartID = new Guid("b3af7fa3-cd44-44e9-9b1f-b914dc827a46"),
                            UserID = "062822b0-80af-4bc9-a491-91cb1a4e778e"
                        },
                        new
                        {
                            CartID = new Guid("d9d7b0a3-ad22-44bf-baa0-8105c791c1b8"),
                            UserID = "59ede842-cf12-4e47-a4ad-83b069c0d704"
                        },
                        new
                        {
                            CartID = new Guid("7cad853c-87ff-4408-9821-0ab7d5395b00"),
                            UserID = "1fd3f013-1d2b-4941-9016-60dc84b8ade3"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.Property<Guid>("CartID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductCartQuantity")
                        .HasColumnType("int");

                    b.HasKey("CartID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("1d3e2aea-8bff-43a3-b72e-1a5c0ad3e905"),
                            CategoryName = "Anime"
                        },
                        new
                        {
                            CategoryID = new Guid("e6224088-98c3-452c-bd88-c004eec31463"),
                            CategoryName = "Vehicle"
                        },
                        new
                        {
                            CategoryID = new Guid("a3ade310-8d30-4aef-9bc8-f69823ec48a1"),
                            CategoryName = "Marvel"
                        },
                        new
                        {
                            CategoryID = new Guid("a8c2a7b0-f586-42d1-bf49-11e02693b639"),
                            CategoryName = "Architecture"
                        });
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.Property<Guid>("CheckOutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CheckOutID");

                    b.HasIndex("OrderID");

                    b.ToTable("CheckOuts");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.Property<Guid>("CommentImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentImageID");

                    b.HasIndex("CommentID");

                    b.ToTable("CommentsImage");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.Property<Guid>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ArtFold.Models.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderProductID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("PrintPaperType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("c2f1b5d8-1598-4cde-a152-960eae07eabb"),
                            CategoryID = new Guid("1d3e2aea-8bff-43a3-b72e-1a5c0ad3e905"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4887),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Goku SSJ HD – Dragon Ball bao gồm:\r\n- 25 tờ kit mô hình.\r\n- Kích thước: Cao: 55,5cm x Rộng: 13,4cm x Sâu: 23,9cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/ea93877ccd8d3700b6b9ede4220df541.webp",
                            Name = "Son Goku",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 50,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4893)
                        },
                        new
                        {
                            ProductID = new Guid("6abbee53-1cc0-4dcd-ad86-7bb33c4d87b9"),
                            CategoryID = new Guid("1d3e2aea-8bff-43a3-b72e-1a5c0ad3e905"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4903),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Monkey D Luffy - One Piece bao gồm:\r\n- 18 tờ kit mô hình.\r\n- Kích thước: Cao: 40cm x Rộng: 23,4cm x Sâu: 21,6cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e82a586f3d146ea83a3b6303b4668914.webp",
                            Name = "Monkey D. Luffy",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 100,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4903)
                        },
                        new
                        {
                            ProductID = new Guid("07c76a33-7e8d-4317-ab6f-5dd2a8fdc699"),
                            CategoryID = new Guid("1d3e2aea-8bff-43a3-b72e-1a5c0ad3e905"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4909),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Uzumaki Naruto ver 3 bao gồm:\r\n- 6 tờ kit mô hình.\r\n(Mặc định bản kit sẽ được in bản có line, nếu bạn muốn in bản ko line trong đơn hàng bạn ghi chú là \"in bản ko line\" để shop cho in nhé)\r\n- Kích thước A4: Cao: 17cm x Rộng: 20,1cm x Sâu: 28,3cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/sg-11134201-22110-igsmlbzefhkvf0.webp",
                            Name = "Uzumaki Naruto",
                            Price = 42000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4909)
                        },
                        new
                        {
                            ProductID = new Guid("85ddd75c-e64f-44b7-8a7b-2824a7d6614f"),
                            CategoryID = new Guid("1d3e2aea-8bff-43a3-b72e-1a5c0ad3e905"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4913),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Pokemon Pikachu Polygon ver 2 bao gồm:\r\n- 9 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 4 tờ hướng dẫn lắp ráp.\r\n- Kích thước A4: Cao: 33cm x Rộng: 30cm x Sâu: 34cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-ls9lvceatuah97@resize_w450_nl.webp",
                            Name = "Pikachu Polygon ver 2",
                            Price = 59000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4914)
                        },
                        new
                        {
                            ProductID = new Guid("ea290f8a-d164-4e97-81f9-bc3535cbb41e"),
                            CategoryID = new Guid("1d3e2aea-8bff-43a3-b72e-1a5c0ad3e905"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4932),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Chibi Levi Ackerman ver 3 – Attack on Titan bao gồm:\r\n- 6 tờ kit mô hình.\r\n- Kích thước: Cao: 20,3cm x Rộng: 11,1cm x Sâu: 18cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a6da3b4677bd9309784051610617a5e7@resize_w450_nl.webp",
                            Name = "Chibi Levi Ackerman",
                            Price = 14000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 80,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4933)
                        },
                        new
                        {
                            ProductID = new Guid("4776f7ee-3557-4f22-94a6-71454a4ac2c1"),
                            CategoryID = new Guid("e6224088-98c3-452c-bd88-c004eec31463"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4940),
                            Description = "Bộ sản phẩm Mô hình giấy phi thuyền không gian vũ trụ tàu con thoi Space Shuttle Atlantis bao gồm:\r\n- 11 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4ed6a6e35f435d28286762c02db7f911.webp",
                            Name = "Space Shuttle Atlantis",
                            Price = 72000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4941)
                        },
                        new
                        {
                            ProductID = new Guid("dccc7a03-d426-4e16-8530-323a03a71287"),
                            CategoryID = new Guid("e6224088-98c3-452c-bd88-c004eec31463"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4947),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Lamborghini Sesto Elemento bao gồm:\r\n- 3 tờ kit mô hình.\r\n- Kích thước: Cao: 4,9cm x Rộng: 8,6cm x Sâu: 18,1cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/966ca26a8de1b2f34c66449cc74e48bd.webp",
                            Name = "Lamborghini Sesto Elemento",
                            Price = 69000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4948)
                        },
                        new
                        {
                            ProductID = new Guid("00b2ccdb-f703-4020-a5ce-8b0654ac70c6"),
                            CategoryID = new Guid("e6224088-98c3-452c-bd88-c004eec31463"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4962),
                            Description = "Bộ sản phẩm Mô hình giấy xe ô tô Prototype Technology Group BMW bao gồm:\r\n- 6 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/9fb112bf0fe8b6b773c0aa7411a2392c.webp",
                            Name = "Prototype Technology Group BMW",
                            Price = 79000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4962)
                        },
                        new
                        {
                            ProductID = new Guid("135c9a74-91c2-4ead-9bb3-489024f13050"),
                            CategoryID = new Guid("e6224088-98c3-452c-bd88-c004eec31463"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4967),
                            Description = "Bộ sản phẩm Mô hình giấy xe máy Mille Miglia Custom Chopper bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 8 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/2fbbe89ee72a717b7f2bed3a84d8b259.webp",
                            Name = "Mille Miglia Custom Chopper Bike",
                            Price = 149000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4968)
                        },
                        new
                        {
                            ProductID = new Guid("884034ef-443b-4b19-9f4a-dabced00bc5c"),
                            CategoryID = new Guid("e6224088-98c3-452c-bd88-c004eec31463"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4983),
                            Description = "Bộ sản phẩm Mô hình giấy máy bay Boeing 777-200 British Airways bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a09cfa936019a5e6c493acafbd4a13e1.webp",
                            Name = "Boeing 777-200 British Airways",
                            Price = 58000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4984)
                        },
                        new
                        {
                            ProductID = new Guid("604ed444-39b5-45de-873a-da8113845ae8"),
                            CategoryID = new Guid("a3ade310-8d30-4aef-9bc8-f69823ec48a1"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4996),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avenger Robot Iron Man Mark VII bao gồm:\r\n- 16 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5fc4fc6d877bc7c905b6f92eeb951a94.webp",
                            Name = "Robot Iron Man Mark VII",
                            Price = 105000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(4996)
                        },
                        new
                        {
                            ProductID = new Guid("ec615f88-3682-48ec-a0ac-b98695d2b49b"),
                            CategoryID = new Guid("a3ade310-8d30-4aef-9bc8-f69823ec48a1"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5002),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Thor mập - Marvel bao gồm:\r\n- 8 tờ kit mô hình in mực Dầu trên giấy Màu.\r\n- 2 tờ hướng dẫn lắp ráp.\r\n- Kích thước : Cao 15,5cm x Rộng 13cm x Sâu 9cm.\r\nXuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lmua3ev8pza778.webp",
                            Name = "Chibi Thor ",
                            Price = 50000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5003)
                        },
                        new
                        {
                            ProductID = new Guid("1710dc28-3595-4082-a879-3562e06daa6d"),
                            CategoryID = new Guid("a3ade310-8d30-4aef-9bc8-f69823ec48a1"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5008),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Marvel Hulk Treo tường ver 3 bao gồm:\r\n– 17 tờ kit mô hình in trên giấy A4 Ford màu định lượng 180gsm (so với giấy photo là 70gsm) + scan code xem hướng dẫn.\r\n- Kích thước: Cao: khoảng 40cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/8aedf29f64c9de9ac7ec2b3f48182f7b.webp",
                            Name = "Marvel Hulk Wall Hanging",
                            Price = 83000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5008)
                        },
                        new
                        {
                            ProductID = new Guid("f0efcfdd-3613-4596-8aa2-1e40abff1258"),
                            CategoryID = new Guid("a3ade310-8d30-4aef-9bc8-f69823ec48a1"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5125),
                            Description = "Bộ sản phẩm Mô hình giấy Marvel Avengers Iron Spider bao gồm:\r\n- 15 tờ kit mô hình.\r\n- Kích thước: Cao: 38cm x Rộng: 30,7cm x Sâu: 34,5cm",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/4b925257b8c606d8ba5549860b146ad1.webp",
                            Name = "Marvel Avengers Iron Spider",
                            Price = 100000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5143)
                        },
                        new
                        {
                            ProductID = new Guid("65824e04-351a-4821-a9eb-e0ca2ad2d36f"),
                            CategoryID = new Guid("a3ade310-8d30-4aef-9bc8-f69823ec48a1"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5154),
                            Description = "Bộ sản phẩm Mô hình giấy Anime Game Chibi Doctor Strange - Marvel bao gồm:\r\n- 2 tờ kit mô hình + kèm scan code xem video hướng dẫn lắp ráp.\r\n* Xuất xứ: Việt Nam",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lzad737x2krla7@resize_w450_nl.webp",
                            Name = "Chibi Doctor Strange",
                            Price = 25000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5155)
                        },
                        new
                        {
                            ProductID = new Guid("d6ce38da-861e-43a2-a909-686dc406a886"),
                            CategoryID = new Guid("a8c2a7b0-f586-42d1-bf49-11e02693b639"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5163),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc lâu đài Đức Neuschwanstein Castle - Germany bao gồm:\r\n- 8 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/d50b7f9c059c8cb8e7c0654954a08ab1.webp",
                            Name = "Neuschwanstein Castle - Germany",
                            Price = 55000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5164)
                        },
                        new
                        {
                            ProductID = new Guid("77f2054e-8157-494d-a9fd-7a10298d79c9"),
                            CategoryID = new Guid("a8c2a7b0-f586-42d1-bf49-11e02693b639"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5170),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Tháp Luân Đôn Tower of London – England bao gồm:\r\n- 10 tờ kit mô hình.\r\n- 2 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/5e96e9613e2fd22d255d9d90159d19ce.webp",
                            Name = "Tower of London – England",
                            Price = 65000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5170)
                        },
                        new
                        {
                            ProductID = new Guid("3bd9ee19-dca5-4b3a-ba71-f30588e4fcf6"),
                            CategoryID = new Guid("a8c2a7b0-f586-42d1-bf49-11e02693b639"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5178),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Pháp tháp Eiffel Tower bao gồm:\r\n- 9 tờ kit mô hình.\r\n- 1 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/a077c0d85e3866a441e4b1e76ab69dbb.webp",
                            Name = "Eiffel Tower",
                            Price = 60000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5179)
                        },
                        new
                        {
                            ProductID = new Guid("3657b0dd-1994-4c86-8c2e-2366ae627f83"),
                            CategoryID = new Guid("a8c2a7b0-f586-42d1-bf49-11e02693b639"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5184),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Cambuchia Angkor Wat bao gồm:\r\n- 24 tờ kit mô hình.\r\n- 3 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/edb6286c7abf2d62a36a911b5d0983d4.webp",
                            Name = "Cambuchia Angkor Wat",
                            Price = 156000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5185)
                        },
                        new
                        {
                            ProductID = new Guid("1f866ce8-b5ec-4f57-a3dc-c0ba6e398b8a"),
                            CategoryID = new Guid("a8c2a7b0-f586-42d1-bf49-11e02693b639"),
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5190),
                            Description = "Bộ sản phẩm Mô hình giấy kiến trúc Nhà thờ chính Siena Cathedral - Italy bao gồm:\r\n- 19 tờ kit mô hình.\r\n- 4 tờ hướng dẫn lắp ráp.",
                            ImgUrl = "https://down-vn.img.susercontent.com/file/e7ac1e43b3160334e9ca1fc66da7f34a.webp",
                            Name = "Siena Cathedral - Italy",
                            Price = 124000.0,
                            PrintPaperType = "A4",
                            ProductQuantity = 10,
                            UpdatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 726, DateTimeKind.Local).AddTicks(5191)
                        });
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.Property<Guid>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HouseAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a89c25d6-cce0-4254-9a16-5663d79746cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b50f1bf3-17ac-42ec-99ac-c853abe22832",
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 361, DateTimeKind.Local).AddTicks(6890),
                            Email = "bluegameming292003@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Trần Minh Quốc Khánh",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBzMMRBTsWJe+/easo8TpnAYDXVMWz/XCIERKm24/7Ld7Cga4C3vZp/B1FEm8mWAjQ==",
                            PhoneNumber = "0934763210",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3e49f2da-4834-40cf-9771-22cfbad5dca7",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "99cce0f7-0a0a-4fdb-89ce-3f130d9cee88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bad2b764-268d-4bc8-8382-5b69cb8fed2a",
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 420, DateTimeKind.Local).AddTicks(7219),
                            Email = "taimodel@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Lương Tài",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFRApQu7vpeilqE+scv9OJBMgF4SDCVWm1kyecm2GGt8UE4O66zC+JczP3S8ba+sig==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81af7dfe-7d41-4420-a484-d91f0e80dadd",
                            TwoFactorEnabled = false,
                            UserName = "TaiModel"
                        },
                        new
                        {
                            Id = "0da17ed7-ffb0-491a-9284-c6bae0587dac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6657377-0805-453a-9e41-3a4dd8681807",
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 481, DateTimeKind.Local).AddTicks(5932),
                            Email = "dinhuynhminhthu@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Đinh Huỳnh Minh Thư",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAtqmm4BvcJwkwHChUnDQmPGH2WCiB9O6RwDOJkOhsweyErTzLiMKJNbVFeQy3thiA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be1cb96e-fb6d-49cf-adeb-1668eb13c43d",
                            TwoFactorEnabled = false,
                            UserName = "MinhThu"
                        },
                        new
                        {
                            Id = "062822b0-80af-4bc9-a491-91cb1a4e778e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3bd9422-0600-41e4-a293-84e8cfe20388",
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 541, DateTimeKind.Local).AddTicks(4741),
                            Email = "ngocha@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Ngọc Hà",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEALi7cRZCZhC9ljpVn/ooW7C88SPC1vJgyIgw0kxM7Eg75obdHRJTgTIJdehXLBugg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1542b5e8-8d6b-4251-974d-5b8c4ebf6788",
                            TwoFactorEnabled = false,
                            UserName = "NgocHa"
                        },
                        new
                        {
                            Id = "59ede842-cf12-4e47-a4ad-83b069c0d704",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abf4e61e-91b4-49e2-b739-586b61fd1053",
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 601, DateTimeKind.Local).AddTicks(2918),
                            Email = "nguyenvungochan@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Nguyễn Vũ Ngọc Hân",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBnt53U4jJ/IdwtZV9jNY2A4sl5F+SqnI1e1WHr3M21DU6oV757kbxL92yS2pq/hbQ==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71a5f9c0-1986-4cb7-a787-fdcb9087a94d",
                            TwoFactorEnabled = false,
                            UserName = "NgocHan"
                        },
                        new
                        {
                            Id = "1fd3f013-1d2b-4941-9016-60dc84b8ade3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2308871c-b36e-4f0b-9ba9-c8b3725dc993",
                            CreatedAt = new DateTime(2024, 10, 16, 15, 14, 35, 666, DateTimeKind.Local).AddTicks(4391),
                            Email = "thuIT@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Thư AI",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEDFV0zMjTeBltY0Med6fW21iwGkOuxJM5y7XTeRhyYFlsRvskj0JitYEjzoh/Znpag==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33b30380-8ba0-40d7-8aa8-ce507acba316",
                            TwoFactorEnabled = false,
                            UserName = "ThuIT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3189ea3c-31ef-41be-a305-e6277a05ab69",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "accd48e1-e74e-4aca-b570-bf64312a83b1",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a89c25d6-cce0-4254-9a16-5663d79746cd",
                            RoleId = "3189ea3c-31ef-41be-a305-e6277a05ab69"
                        },
                        new
                        {
                            UserId = "99cce0f7-0a0a-4fdb-89ce-3f130d9cee88",
                            RoleId = "accd48e1-e74e-4aca-b570-bf64312a83b1"
                        },
                        new
                        {
                            UserId = "0da17ed7-ffb0-491a-9284-c6bae0587dac",
                            RoleId = "accd48e1-e74e-4aca-b570-bf64312a83b1"
                        },
                        new
                        {
                            UserId = "062822b0-80af-4bc9-a491-91cb1a4e778e",
                            RoleId = "accd48e1-e74e-4aca-b570-bf64312a83b1"
                        },
                        new
                        {
                            UserId = "59ede842-cf12-4e47-a4ad-83b069c0d704",
                            RoleId = "accd48e1-e74e-4aca-b570-bf64312a83b1"
                        },
                        new
                        {
                            UserId = "1fd3f013-1d2b-4941-9016-60dc84b8ade3",
                            RoleId = "accd48e1-e74e-4aca-b570-bf64312a83b1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CartProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.CheckOut", b =>
                {
                    b.HasOne("ArtFold.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.CommentImage", b =>
                {
                    b.HasOne("ArtFold.Models.Comment", "Comment")
                        .WithMany("CommentImages")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.HasOne("ArtFold.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtFold.Models.OrderProduct", b =>
                {
                    b.HasOne("ArtFold.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.HasOne("ArtFold.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ArtFold.Models.ProductImage", b =>
                {
                    b.HasOne("ArtFold.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ArtFold.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtFold.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ArtFold.Models.Comment", b =>
                {
                    b.Navigation("CommentImages");
                });

            modelBuilder.Entity("ArtFold.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("ArtFold.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Comments");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ArtFold.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
